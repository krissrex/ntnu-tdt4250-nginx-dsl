/*
 * generated by Xtext 2.18.0.M3
 */
package no.ntnu.tdt4250.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import no.ntnu.tdt4250.nginx.Nginx
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource

@ExtendWith(InjectionExtension)
@InjectWith(NginxInjectorProvider)
class NginxParsingTest {
	@Inject
	ParseHelper<Nginx> parseHelper
	
	@Test
	def void parseDefault() {
		/*
		 ('template:' template=Template)? &
			('root:' root=FilePath)? &
			('index:' index+=FilePath+)? &
			('error_page:' errorPage+=ErrorPage)* &
			(sslCert=SslCert)? &
			('log_name:' logName=STRING)?
			('port:' port=INT)
			('include:' includes+=STRING)* &
			('https_redirect:' httpsRedirect='true'|'false') &
			('gzip:' gzip='true'|'false') 
			* 
			* 
				'ssl_certificate:' sslCert=FilePath &
				'ssl_certificate_key:' sslCertKey=FilePath &
				'ssl_dhparam:' dhParam=FilePath
		 */
		val result = parseHelper.parse('''
			mycoolsite.com:
			  root: "/var/www/html"
			  index: "index.html index.php"
			  template: php5.6
			  error_page: 404 "/404.html"
			  error_page: 500 501 502 "/50x.html"
			  ssl_certificate: "/etc/somepath/cert.pem"
			  ssl_certificate_key: "/etc/somepath/cert_key.pem"
			  ssl_dhparam: "/etc/somepath/dhparam.pem"
			  log_name: "/var/log/nginx/access.log"
			  include: "fastcgi_params"
			  https_redirect: true
			  
			default
			othersite.no
			www.othersite.no:
			  index: "index.html"
			  port: 8080
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: 
			«errors.toPrettyString»''')
	}
	
	@Test
	def testFailsWhenBothPortAndRoot() {
		val result = parseHelper.parse('''
			mysite.no:
			  index: "index.html"
			  port: 8080
			  root: "/var/www/html"
		''')
		
		1 <=> result.eResource.errors.length
	}
	
	@Test
	def testDataFromModel() {
		val result = parseHelper.parse('''
			mycoolsite.com:
			  root: "/var/www/html"
			  index: "index.html index.php"
			  template: php5.6
			  error_page: 404 "/404.html"
			  error_page: 500 501 502 "/50x.html"
			  ssl_certificate: "/etc/somepath/cert.pem"
			  ssl_certificate_key: "/etc/somepath/cert_key.pem"
			  ssl_dhparam: "/etc/somepath/dhparam.pem"
			  log_name: "/var/log/nginx/access.log"
			  include: "fastcgi_params"
			  https_redirect: true
			  
			othersite.no
			www.othersite.no:
			  index: "index.html"
			  port: 8080
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «toPrettyString(errors)»''')
		
		// Test content of the model 
		
		"mycoolsite.com" <=> result.sites.get(0).name
		"othersite.no" <=> result.sites.get(1).name
		
		val coolSite = result.sites.get(0);
		"php5.6" <=> coolSite.template
		'/var/www/html' <=> coolSite.root
		404 <=> coolSite.errorPage.get(0).httpCodes.get(0)
		
		println(coolSite.errorPage.get(0).uri);
		'/404.html' <=> coolSite.errorPage.get(0).uri
		
		val otherSite = result.sites.get(1)
		"www.othersite.no" <=> otherSite.alternativeNames.get(0)
	}
	
	/** maps the <=> 'spaceship' operator to Assert.assertEquals
	 * 
	 * https://gitlab.stud.idi.ntnu.no/TDT4250/examples/blob/master/tdt4250.ra.xtext2.tests/src/tdt4250/ra/tests/Rax2ParsingTest.xtend
	 */
	private def void operator_spaceship(Object expected, Object actual) {
		Assertions.assertEquals(expected, actual);
	}
	
	private def String toPrettyString(EList<Resource.Diagnostic> errors) {
		return errors.map['''«it.line»:«it.column» ->«it.message»   --- «it.toString»'''].join("\n")
	}
	
}
