[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore', '/no.ntnu.tdt4250.nginx.dsl/model/generated/Nginx.ecore')]


[template public generateNginxConfig(config : Nginx)]
[comment @main/]
[for (site: Site | config.sites)]
	[generateSite(site)/]
[/for]
[/template]

[template public generateSite(site: Site)]
[file (site.name.concat('.conf'), false, 'UTF-8')]
# --------------------------------
# GENERATED [site.name/]
[if (inherits(site))]
# INHERITED FROM [site.inherits.name /]
[/if]
# --------------------------------
server {
	[servernames(site)/]
	[if (getSSLCert(site) <> null and getHTTPSRedirect(site) = true)]
	# SSL configuration
	listen ['['/]::[']'/]:443 ssl http2 ipv6only=on;
	listen 443 ssl http2;

	[/if]
	[certificates(site)/]
	[if (hasRoot(site))]
	root [site.root/];

	location / {
		try_files $uri $uri/ =404;
	}

	location ~ /\.ht {
		deny all;
	}

	[error_pages(site)/]
	[/if]
	[if (getTemplate(site) <> null and getTemplate(site).startsWith('php'))]
	[php(site)/]
	[/if]
}


[if (getHTTPSRedirect(site))]
# if https redirect
[ssl_redirect(site)/]
[/if]
[/file]

[if inherits(site)]
[generateSite(site.inherits)/]
[/if]
[/template]

[template public ssl_redirect(site: Site)]
server {
	if ($host = [site.name/]) {
		return 301 https://$host$request_uri;
	}

	server_name [site.name/];

	listen 80;
	listen ['['/]::[']'/]:80;
	return 404; # managed by Certbot
}
[/template]

[template public certificates(site: Site)]
[if (getSSLCert(site) <> null)]
ssl_certificate [getSSLCert(site).sslCert/];
ssl_certificate_key [getSSLCert(site).sslCertKey/];
include /etc/letsencrypt/options-ssl-nginx.conf;
ssl_dhparam [getSSLCert(site).dhParam/];

[/if]
[/template]


[template public php(site: Site)]

index index.php index.html index.htm index.nginx-debian.html;

location ~ \.php$ {
	include snippets/fastcgi-php.conf;
[if (getTemplate(site) = 'php5.6')]
	fastcgi_pass unix:/run/php/php5.6-fpm.sock;
[elseif (getTemplate(site) = 'php7.2')]
	fastcgi_pass unix:/run/php/php7.2-fpm.sock;
[/if]
}

[/template]


[template public servernames(site: Site)]
# sitename
server_name: [site.name/];
[for (alternative: String | site.alternativeNames)]
server_name: [alternative/];
[/for]
[/template]

[template public error_pages(site: Site)]
# error pages
[for (errorPage: ErrorPage | getErrorPages(site))]
error_page [for (err: Integer | errorPage.httpCodes)][err/] [/for][errorPage.uri/];
location = [errorPage.uri/] {
	root [site.root/];
	internal;
}

[/for]

[/template]

[query public hasRoot(site : Site) : EBoolean = site.root <> null and site.root.size() <> 0 /]
[query public getErrorPages(site : Site) : OrderedSet(ErrorPage) = 
	if inherits(site)
	then getErrorPages(site.inherits)->addAll(site.errorPage)
	else site.errorPage
	endif 
/]
[query public inherits(site : Site) : EBoolean = site.inherits <> null /]
[query public getTemplate(site : Site) : EString = 
	if site.template = null and inherits(site)
	then getTemplate(site.inherits)
	else site.template
	endif
/]
[query public getHTTPSRedirect(site: Site) : EBoolean = 
	if site.httpsRedirect <> true and inherits(site) 
	then getHTTPSRedirect(site.inherits) 
	else site.httpsRedirect
	endif
/]
[query public getSSLCert(site: Site) : SslCert = 
	if site.sslCert = null and inherits(site)
	then getSSLCert(site.inherits)
	else site.sslCert
	endif
/]


