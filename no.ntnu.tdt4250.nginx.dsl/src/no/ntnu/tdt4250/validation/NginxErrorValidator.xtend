/*
 * generated by Xtext 2.18.0.M3
 */
package no.ntnu.tdt4250.validation

import no.ntnu.tdt4250.nginx.NginxPackage
import org.eclipse.xtext.validation.Check
import no.ntnu.tdt4250.nginx.Site
import java.util.regex.Pattern
import java.util.regex.PatternSyntaxException
import org.eclipse.xtext.validation.ComposedChecks
import no.ntnu.tdt4250.nginx.ErrorPage
import org.eclipse.xtext.validation.AbstractDeclarativeValidator
import org.eclipse.xtext.validation.EValidatorRegistrar
import java.util.List
import java.net.HttpURLConnection
import java.net.URLConnection

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class NginxErrorValidator extends AbstractDeclarativeValidator {

	public static val INVALID_ERROR_CODE = 'no.ntnu.tdt4250.validation.ERROR_PAGE__HTTP_CODES'

	@Check
	def void checkErrorPage(ErrorPage errorPage) {
		checkHttpCodes(errorPage)
		
	}

	def void checkHttpCodes(ErrorPage errorPage) {
		for (errorCode : errorPage.httpCodes) {
			if ((errorCode < 100) || (errorCode > 1000)) {
				error(
					'Error code: ' + errorCode + ' is not valid',
					NginxPackage.Literals.ERROR_PAGE__HTTP_CODES,
					INVALID_ERROR_CODE
				)
			}
		}
	}
	

	override register(EValidatorRegistrar registrar) {
		// not needed for classes used as ComposedCheck
	}

}
