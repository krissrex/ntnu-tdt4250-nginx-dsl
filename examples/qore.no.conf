# --------------------------------
# www.qore.no
# --------------------------------
server {
	server_name qore.no www.qore.no;
	root /var/www/qore.no/html;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	location / {
		try_files $uri $uri/ =404;
	}

	# No file extension php support
	location @extensionless-php {
		rewrite ^(.*)$ $1.php last;
	}

	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
	}

	# deny access to .htaccess files
	location ~ /\.ht {
		deny all;
	}

	error_page 404 /404.html;
	location = /404.html {
		root /var/www/qore.no/html;
		internal;
	}

	error_page 500 502 503 504 /50x.html;
	location = /50x.html {
		root /var/www/qore.no/html;
		internal;
	}

	# Certbot SSL configuration
	listen [::]:443 ssl http2 ipv6only=on; # managed by Certbot
	listen 443 ssl http2; # managed by Certbot
	
	ssl_certificate /etc/cloudflare/qore.no/certificate.pem;
	ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
	if ($host = www.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot


	if ($host = qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot


	server_name qore.no www.qore.no;

	listen 80;
	listen [::]:80;
	return 404; # managed by Certbot
}


# --------------------------------
# beta.qore.no
# --------------------------------
server {
	root /var/www/qore.no/beta;
	index index.php index.html index.htm;

	server_name beta.qore.no;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
		auth_basic "Restricted content";
		auth_basic_user_file /etc/nginx/.htpasswd;
	}

	error_page 401 403 404 /404.html;

	# redirect server error pages to the static page /50x.html
	error_page 500 502 503 504 /50x.html;
	location = /50x.html {
		root /var/www/qore.no/html;
	}

	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
	}

	listen 443 ssl; # managed by Certbot
	ssl_certificate /etc/cloudflare/qore.no/certificate.pem; 
	ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
	if ($host = beta.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	listen 80;

	server_name beta.qore.no;
	return 404; # managed by Certbot
}


# --------------------------------
# blog.qore.no
# --------------------------------
server {
	server_name blog.qore.no;
	root /var/www/qore.no/blog/system/nginx-root;
	
	location / {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $http_host;
		proxy_pass http://127.0.0.1:2368;
	}

	location ~ /.well-known {
		allow all;
	}

	client_max_body_size 50m;
	
	listen 443 ssl; # managed by Certbot
	ssl_certificate /etc/cloudflare/qore.no/certificate.pem;
	ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
	if ($host = blog.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	server_name blog.qore.no;
	listen 80;
	return 404; # managed by Certbot
}


# --------------------------------
# db.qore.no
# --------------------------------
server {
	root /var/www/qore.no/db;
	index index.php index.html index.htm;

	server_name db.qore.no wiki.qore.no pl.qore.no;
	
	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	error_page 401 403 404 /404.html;

	# redirect server error pages to the static page /50x.html
	error_page 500 502 503 504 /50x.html;
	location = /50x.html {
		root /var/www/qore.no/db;
	}

	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
	}
	
	listen 443 ssl; # managed by Certbot
		ssl_certificate /etc/cloudflare/qore.no/certificate.pem;
		ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
	if ($host = db.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot
	
	if ($host = pl.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot
	
	if ($host = wiki.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	server_name db.qore.no;
	listen 80;
	return 404; # managed by Certbot
}


# --------------------------------
# git.qore.no
# --------------------------------
server {
	server_name git.qore.no;
	
	location / {
		proxy_pass http://localhost:3004;
	}

	listen 443 ssl; # managed by Certbot
		ssl_certificate /etc/cloudflare/qore.no/certificate.pem;
		ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
	if ($host = git.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	server_name git.qore.no;
	listen 80;
	return 404; # managed by Certbot
}

# --------------------------------
# stats.qore.no
# --------------------------------
server {
	root /var/www/qore.no/stats;
	index index.php index.html index.htm;

	server_name stats.qore.no;
	
	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	error_page 401 403 404 /404.html;

	# redirect server error pages to the static page /50x.html
	error_page 500 502 503 504 /50x.html;
	location = /50x.html {
		root /var/www/qore.no/beta;
	}

	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
	}

	listen 443 ssl; # managed by Certbot
		ssl_certificate /etc/cloudflare/qore.no/certificate.pem;
		ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
	if ($host = stats.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	server_name stats.qore.no;
	listen 80;
	return 404; # managed by Certbot
}

# --------------------------------
# test.qore.no
# --------------------------------
server {
	root /var/www/qore.no/test/public;
	index index.php index.html index.htm;

	server_name test.qore.no;
	
	location / {
		try_files $uri $uri/ /index.php?$query_string;
	}

	error_page 401 403 404 /404.html;

	# redirect server error pages to the static page /50x.html
	error_page 500 502 503 504 /50x.html;
	location = /50x.html {
		root /var/www/qore.no/test/public;
	}

	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
	}

	listen 443 ssl; # managed by Certbot
		ssl_certificate /etc/cloudflare/qore.no/certificate.pem;
		ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}
server {
	if ($host = test.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	server_name test.qore.no;
	listen 80;
	return 404; # managed by Certbot
}


# --------------------------------
# px.qore.no
# --------------------------------
server {
	root /var/www/qore.no/px/public;

	index index.php index.html index.htm index.nginx-debian.html;

	server_name px.qore.no;

#	location / {
#		try_files $uri $uri/ =404;
#	}

	location / {
		root      /var/www/qore.no/px/public;
		index     index.html index.htm index.php;
		try_files $uri $uri/ /index.php?q=$uri&$args;
		client_max_body_size 16m;
	}

#	location ~ \.php$ {
#		include snippets/fastcgi-php.conf;
#		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
#	}


	location ~ \.php$ {
		root          /var/www/qore.no/px/public;
		include       /etc/nginx/fastcgi.conf;
		#include       snippets/fastcgi-php.conf;
		client_max_body_size 16m;

		#fastcgi_pass  127.0.1.1:9000;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_buffer_size 32k;
		fastcgi_buffers 16 16k;
		fastcgi_connect_timeout 3m;
		fastcgi_read_timeout 3m;
		fastcgi_send_timeout 3m;
	}


	location ~ /\.ht {
		deny all;
	}

	listen 443 ssl;
	ssl_certificate /etc/cloudflare/qore.no/certificate.pem;
	ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
	if ($host = px.qore.no) {
		return 301 https://$host$request_uri;
	}

	server_name px.qore.no;
	listen 80;
}


# --------------------------------
# nextcloud.qore.no
# --------------------------------
server {
	root /var/www/qore.no/nextcloud/;
	index index.php index.html index.htm;

	server_name hard.qore.no cloud.qore.no nextcloud.qore.no;
	

    # Add headers to serve security related headers
    # Before enabling Strict-Transport-Security headers please read into this
    # topic first.
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";

    # WARNING: Only add the preload option once you read about
    # the consequences in https://hstspreload.org/. This option
    # will add the domain to a hardcoded list that is shipped
    # in all major browsers and getting removed from this list
    # could take several months.
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
    add_header Referrer-Policy no-referrer;

    # Remove X-Powered-By, which is an information leak
    fastcgi_hide_header X-Powered-By;

	listen 443 ssl; # managed by Certbot
	ssl_certificate /etc/cloudflare/qore.no/certificate.pem;
	ssl_certificate_key /etc/cloudflare/qore.no/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # The following 2 rules are only needed for the user_webfinger app.
    # Uncomment it if you're planning to use this app.
    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json
    # last;

    # The following rule is only needed for the Social app.
    # Uncomment it if you're planning to use this app.
    rewrite ^/.well-known/webfinger /public.php?service=webfinger last;

    location = /.well-known/carddav {
      return 301 $scheme://$host/remote.php/dav;
    }
    location = /.well-known/caldav {
      return 301 $scheme://$host/remote.php/dav;
    }

    # set max upload size
    client_max_body_size 512M;
    fastcgi_buffers 64 4K;

    # Enable gzip but do not remove ETag headers
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

    # Uncomment if your server is build with the ngx_pagespeed module
    # This module is currently not supported.
    #pagespeed off;


	location / {
        rewrite ^ /index.php$request_uri;
    }

    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
        deny all;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
        deny all;
    }

    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+)\.php(?:$|/) {
        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param HTTPS on;
        #Avoid sending the security headers twice
        fastcgi_param modHeadersAvailable true;
        fastcgi_param front_controller_active true;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;
    }

    location ~ ^/(?:updater|ocs-provider)(?:$|/) {
        try_files $uri/ =404;
        index index.php;
    }

    # Adding the cache control header for js and css files
    # Make sure it is BELOW the PHP block
    location ~ \.(?:css|js|woff2?|svg|gif)$ {
        try_files $uri /index.php$request_uri;
        add_header Cache-Control "public, max-age=15778463";
        # Add headers to serve security related headers (It is intended to
        # have those duplicated to the ones above)
        # Before enabling Strict-Transport-Security headers please read into
        # this topic first.
        add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";
        #
        # WARNING: Only add the preload option once you read about
        # the consequences in https://hstspreload.org/. This option
        # will add the domain to a hardcoded list that is shipped
        # in all major browsers and getting removed from this list
        # could take several months.
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Robots-Tag none;
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;
        add_header Referrer-Policy no-referrer;

        # Optional: Don't log access to assets
        access_log off;
    }

    location ~ \.(?:png|html|ttf|ico|jpg|jpeg)$ {
        try_files $uri /index.php$request_uri;
        # Optional: Don't log access to other assets
        access_log off;
    }
}

server {
	if ($host = nextcloud.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	if ($host = cloud.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	if ($host = hard.qore.no) {
		return 301 https://$host$request_uri;
	} # managed by Certbot

	server_name hard.qore.no cloud.qore.no nextcloud.qore.no;
	listen 80;
	return 404; # managed by Certbot
}

# --------------------------------
# social.qore.no
# --------------------------------

proxy_cache_path /tmp/pleroma-media-cache levels=1:2 keys_zone=pleroma_media_cache:10m max_size=10g
                 inactive=720m use_temp_path=off;

server {
    server_name    social.qore.no;
    listen         80;
    return         301 https://$server_name$request_uri;

    # Uncomment this if you need to use the 'webroot' method with certbot. Make sure
    # that you also create the .well-known/acme-challenge directory structure in pleroma/priv/static and
    # that is is accessible by the webserver. You may need to load this file with the ssl
    # server block commented out, run certbot to get the certificate, and then uncomment it.
    #
    # location ~ /\.well-known/acme-challenge {
    #     root <path to install>/pleroma/priv/static/;
    # }
}

# Enable SSL session caching for improved performance
ssl_session_cache shared:ssl_session_cache:10m;

server {
    listen 443 ssl http2;
    ssl_session_timeout 5m;

    ssl_trusted_certificate   /etc/cloudflare/qore.no/certificate.pem;
    ssl_certificate           /etc/cloudflare/qore.no/certificate.pem;
    ssl_certificate_key       /etc/cloudflare/qore.no/privkey.pem;

    # Add TLSv1.0 to support older devices
    ssl_protocols TLSv1.2;
    # Uncomment line below if you want to support older devices (Before Android 4.4.2, IE 8, etc.)
    # ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    ssl_prefer_server_ciphers on;
    # In case of an old server with an OpenSSL version of 1.0.2 or below,
    # leave only prime256v1 or comment out the following line.
    ssl_ecdh_curve X25519:prime256v1:secp384r1:secp521r1;
    ssl_stapling on;
    ssl_stapling_verify on;

    server_name social.qore.no;

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/activity+json application/atom+xml;

    # the nginx default is 1m, not enough for large media uploads
    client_max_body_size 16m;

    location / {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;

        proxy_pass http://localhost:4000;

        client_max_body_size 16m;
    }

    location ~ ^/(media|proxy) {
        proxy_cache pleroma_media_cache;
        slice              1m;
        proxy_cache_key    $host$uri$is_args$args$slice_range;
        proxy_set_header   Range $slice_range;
        proxy_http_version 1.1;
        proxy_cache_valid  200 206 301 304 1h;
        proxy_cache_lock on;
        proxy_ignore_client_abort on;
        proxy_buffering off;
        chunked_transfer_encoding on;
        proxy_pass http://localhost:4000;
    }
}

